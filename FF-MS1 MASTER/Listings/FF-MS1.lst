C51 COMPILER V9.60.0.0   FF_MS1                                                            05/19/2021 10:51:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE FF_MS1
OBJECT MODULE PLACED IN .\Objects\FF-MS1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FF-MS1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\FF
                    --MS1.lst) TABS(2) OBJECT(.\Objects\FF-MS1.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // TP5.c
   3          //-----------------------------------------------------------------------------
   4          // AUTH: Mehdi Slama & Julien Pinard
   5          // DATE: Le début des temps
   6          //
   7          // Target: C8051F02x
   8          // Tool chain: KEIL Microvision 4
   9          //
  10          //-----------------------------------------------------------------------------
  11          #include <C8051F020.h>
  12          #include "c8051F020_SFR16.h"
  13          #include "FF-MS1_Config.h"
  14          #include <stdlib.h>
  15          #include <string.h>
  16          
  17          #define Reset_Timer3Overflow TMR3CN &= 0x04
  18          #define Disable_Timer3 TMR3CN = 0x00
  19          
  20          sbit LED = P1^6;
  21          sbit SLAVE_NSS = P0^7;
  22          char i = 0;
  23          char SPIlength = 0;
  24          char SPIcounter = 0;
  25          char xdata message[15];
  26          char* ptr_message = &message;
  27          char* ogptr_message = &message;
  28          char xdata sendBuffer[19];
  29          char* ptr_sendBuffer = &sendBuffer;
  30          char* ogptr_sendBuffer = &sendBuffer;
  31          char envoi[10];
  32          char* ogptr_envoi = &envoi;
  33          char* ptr_envoi = &envoi;
  34          // Prototypes de Fonctions
  35          
  36          void Codage (char SPIlength, char* ptr_sendBuffer, char* ptr_message){
  37   1        *ptr_sendBuffer++ = 'B';
  38   1        *ptr_sendBuffer++ = 'R';
  39   1        while (i < SPIlength){
  40   2          *ptr_sendBuffer++ = *ptr_message++;
  41   2          i++;
  42   2        }
  43   1        while (i < (15)){
  44   2          *ptr_sendBuffer++ = '~';
  45   2          i++;
  46   2        }
  47   1        *ptr_sendBuffer++ = 'U';
  48   1        *ptr_sendBuffer++ = 'H';
  49   1        i = 0;
  50   1      }
  51          
  52          void send_SPI(char* ptr_message,char* ptr_envoi,char* ptr_sendBuffer){
  53   1        while(*ptr_envoi != '\0'){
  54   2          *ptr_message++ = *ptr_envoi++;
C51 COMPILER V9.60.0.0   FF_MS1                                                            05/19/2021 10:51:21 PAGE 2   

  55   2          SPIlength++;
  56   2        }
  57   1        ptr_envoi = ogptr_envoi;
  58   1        ptr_message = ogptr_message;
  59   1        Codage(SPIlength,ptr_sendBuffer,ptr_message);
  60   1        SPIlength=0;
  61   1      }
  62          void Transfert(char c){
  63   1        for(i=0;i < 125;i++);
  64   1        SLAVE_NSS = 0;
  65   1        for(i=0;i < 10;i++);
  66   1        SPI0DAT = c;
  67   1      }
  68          
  69          //-----------------------------------------------------------------------------
  70          //-----------------------------------------------------------------------------
  71          // MAIN Routine
  72          //-----------------------------------------------------------------------------
  73          void main (void) {
  74   1      
  75   1      // Début Code Inistalisations *************************************************
  76   1      
  77   1          Init_Device();  // Appel des configurations globales
  78   1          
  79   1          EA = 1;
  80   1          LED = 0;
  81   1          SLAVE_NSS = 1;
  82   1        
  83   1      // Fin Code Initialisations ***************************************************
  84   1        
  85   1        //Main loop
  86   1        while(1)
  87   1        {
  88   2          //Mettre le message à envoyer dans un string, qui n'accepte que 15 char max.
  89   2          strcpy(envoi,"ABC");
  90   2          send_SPI(ptr_message,envoi,ptr_sendBuffer);
  91   2        }
  92   1      }
  93          
  94          //-----------------------------------------------------------------------------
  95          //-----------------------------------------------------------------------------
  96          
  97          
  98          //-----------------------------------------------------------------------------
  99          //-----------------------------------------------------------------------------
 100          // Fonctions d'interruptions
 101          //-----------------------------------------------------------------------------
 102          // Insérez vos fonctions d'interruption ici
 103          
 104          void ISR_SPI0() interrupt 6{
 105   1        SPIF = 0;
 106   1        SLAVE_NSS = 1;
 107   1      }
 108          
 109          void ISR_TMR3() interrupt 14{
 110   1        Reset_Timer3Overflow;
 111   1        if (SPIcounter > 18){
 112   2          SPIcounter = 0;
 113   2          ptr_sendBuffer = ogptr_sendBuffer;
 114   2          ptr_message = ogptr_message;
 115   2          
 116   2        }
C51 COMPILER V9.60.0.0   FF_MS1                                                            05/19/2021 10:51:21 PAGE 3   

 117   1        else {
 118   2          Transfert(sendBuffer[SPIcounter]);
 119   2          SPIcounter++;
 120   2        }
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    487    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =     34    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
